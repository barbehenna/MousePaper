pHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == 0) {
pHat <- NA
} else {
pHat <- 1 - sqrt(p2[[x]]/p1[[x]])
}
return(pHat)
})
pHatDropNeg <- lapply(pHat, function(x) {
if (x < 0) {
return(NA)
}
})
pHatZeroNeg <- lapply(pHat, function(x) {
if (x < 0) {
return(0)
}
})
pHat <- unlist(pHat)
pHatDropNeg <- unlist(pHatDropNeg)
pHatZeroNeg <- unlist(pHatZeroNeg)
return(data.frame(simnum=rep(x,length(squares)),
dHat=nHat_dHat[,2],
nHat=nHat_dHat[,1],
pHat=pHat,
pHatZeroNeg=pHatZeroNeg,
pHatDropNeg=pHatDropNeg,
aHat=aHat))
})
print(Sys.time())
# Save the data
StatsDF <- as.data.frame(rbindlist(Stats))
StatsDF$square <- factor(rep(1:5, times = iter))
StatsDF$TrapSpacing <- ts
StatsDF$FielSize <- fs
StatsDF$CatchRadius <- delta
StatsDF$NumVentures <- nv
StatsDF$density <- d
#write.csv(StatsDF, paste0("~/Documents/MousePaper/data/","delta_", delta, "ts_", ts, ".csv"))
return(StatsDF)
})
source('~/Documents/Projects/MousePaper/mouse.r')
source('~/Documents/Projects/MousePaper/mouse.r')
iter <- 10
print(Sys.time())
VariableSpacingSimulation <- lapply(Parameters_list, function(param) {
print(param)
print(paste("class:",class(param)))
print(paste("str:", str(param)))
ts <- param$TrapSpacing
fs <- param$FieldSize
np <- param$NumMice
delta <- param$CatchRadius
nv <- 4
d <- param$Density
# Simulate the studies
ncores <- detectCores()
cl <- makeCluster(ncores-1, type = "FORK")
Studies <- parLapply(cl, 1:iter, function(x) studySim(ts=ts, fs=fs, np=np, delta=delta, nv=nv, d=d))
stopCluster(cl)
print(Sys.time())
# Parse the simulated studies
Studies <- lapply(1:iter, function(x) {
p1 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day <= 2] == y))
p1 <- unlist(p1)
p2 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day >= 3] == y))
p2 <- unlist(p2)
return(data.frame(simnum=rep(x,64), trap=1:64, period1=p1, period2=p2, total=p1+p2, ring=rings))
})
print(Sys.time())
aHat <- 1:4 #ring numbers
aHat <- (ts*2*aHat)^2 #concentric ring areas
aHat <- c(aHat, aHat[4]-aHat[3]) #just ring 4
squares <- list(1, 1:2, 1:3, 1:4, 4)
# Calculate statistics
Stats <- lapply(1:iter, function(x) {
p1 <- lapply(squares, function(y) sum(Studies[[x]]$period1[Studies[[x]]$ring %in% y]))
p2 <- lapply(squares, function(y) sum(Studies[[x]]$period2[Studies[[x]]$ring %in% y]))
nHat_dHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == p2[[x]]) {
nHat <- NA
dHat <- NA
} else {
nHat <- (p1[[x]]^2)/(p1[[x]]-p2[[x]])
dHat <- nHat/aHat[[x]]
}
return(c(nHat, dHat))
})
nHat_dHat <- do.call(rbind, nHat_dHat)
pHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == 0) {
pHat <- NA
} else {
pHat <- 1 - sqrt(p2[[x]]/p1[[x]])
}
return(pHat)
})
pHatDropNeg <- lapply(pHat, function(x) {
if (x < 0) {
return(NA)
}
})
pHatZeroNeg <- lapply(pHat, function(x) {
if (x < 0) {
return(0)
}
})
pHat <- unlist(pHat)
pHatDropNeg <- unlist(pHatDropNeg)
pHatZeroNeg <- unlist(pHatZeroNeg)
return(data.frame(simnum=rep(x,length(squares)),
dHat=nHat_dHat[,2],
nHat=nHat_dHat[,1],
pHat=pHat,
pHatZeroNeg=pHatZeroNeg,
pHatDropNeg=pHatDropNeg,
aHat=aHat))
})
print(Sys.time())
# Save the data
StatsDF <- as.data.frame(rbindlist(Stats))
StatsDF$square <- factor(rep(1:5, times = iter))
StatsDF$TrapSpacing <- ts
StatsDF$FielSize <- fs
StatsDF$CatchRadius <- delta
StatsDF$NumVentures <- nv
StatsDF$density <- d
#write.csv(StatsDF, paste0("~/Documents/MousePaper/data/","delta_", delta, "ts_", ts, ".csv"))
return(StatsDF)
})
iter <- 10
print(Sys.time())
VariableSpacingSimulation <- lapply(Parameters_list, function(param) {
print(param)
print(paste("class:",class(param)))
print(paste("str:", str(param)))
ts <- param$TrapSpacing
fs <- param$FieldSize
np <- param$NumMice
delta <- param$CatchRadius
nv <- 4
d <- param$Density
# Simulate the studies
ncores <- detectCores()
cl <- makeCluster(ncores-1, type = "FORK")
Studies <- parLapply(cl, 1:iter, function(x) studySim(ts=ts, fs=fs, np=np, delta=delta, nv=nv, d=d))
stopCluster(cl)
print(Sys.time())
# Parse the simulated studies
Studies <- lapply(1:iter, function(x) {
p1 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day <= 2] == y))
p1 <- unlist(p1)
p2 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day >= 3] == y))
p2 <- unlist(p2)
return(data.frame(simnum=rep(x,64), trap=1:64, period1=p1, period2=p2, total=p1+p2, ring=rings))
})
print(Sys.time())
aHat <- 1:4 #ring numbers
aHat <- (ts*2*aHat)^2 #concentric ring areas
aHat <- c(aHat, aHat[4]-aHat[3]) #just ring 4
squares <- list(1, 1:2, 1:3, 1:4, 4)
# Calculate statistics
Stats <- lapply(1:iter, function(x) {
p1 <- lapply(squares, function(y) sum(Studies[[x]]$period1[Studies[[x]]$ring %in% y]))
p2 <- lapply(squares, function(y) sum(Studies[[x]]$period2[Studies[[x]]$ring %in% y]))
nHat_dHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == p2[[x]]) {
nHat <- NA
dHat <- NA
} else {
nHat <- (p1[[x]]^2)/(p1[[x]]-p2[[x]])
dHat <- nHat/aHat[[x]]
}
return(c(nHat, dHat))
})
nHat_dHat <- do.call(rbind, nHat_dHat)
pHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == 0) {
pHat <- NA
} else {
pHat <- 1 - sqrt(p2[[x]]/p1[[x]])
}
return(pHat)
})
pHatDropNeg <- lapply(pHat, function(x) {
if (x < 0) {
return(NA)
} else {
return(x)
}
})
pHatZeroNeg <- lapply(pHat, function(x) {
if (x < 0) {
return(0)
} else {
return(x)
}
})
pHat <- unlist(pHat)
pHatDropNeg <- unlist(pHatDropNeg)
pHatZeroNeg <- unlist(pHatZeroNeg)
return(data.frame(simnum=rep(x,length(squares)),
dHat=nHat_dHat[,2],
nHat=nHat_dHat[,1],
pHat=pHat,
pHatZeroNeg=pHatZeroNeg,
pHatDropNeg=pHatDropNeg,
aHat=aHat))
})
print(Sys.time())
# Save the data
StatsDF <- as.data.frame(rbindlist(Stats))
StatsDF$square <- factor(rep(1:5, times = iter))
StatsDF$TrapSpacing <- ts
StatsDF$FielSize <- fs
StatsDF$CatchRadius <- delta
StatsDF$NumVentures <- nv
StatsDF$density <- d
#write.csv(StatsDF, paste0("~/Documents/MousePaper/data/","delta_", delta, "ts_", ts, ".csv"))
return(StatsDF)
})
NA<0
x<- NA
x < 0
!is.na(x)
x < 0 && !is.na(x)
tmp_fxn <- function(x) {
if (x < 0 && !is.na(x)) {
return(NA)
} else {
return(x)
}
}
tmp_fxn(NA)
tmp_fxn(-1)
tmp_fxn(1)
tmp_fxn <- function(x) {
if (x < 0 && !is.na(x)) {
return(0)
} else {
return(x)
}
}
test <- c(NA, -1, 1)
tmp_fxn(test)
tmp_fxn(-1)
lapply(test, tmp_fxn)
iter <- 10
print(Sys.time())
VariableSpacingSimulation <- lapply(Parameters_list, function(param) {
print(param)
print(paste("class:",class(param)))
print(paste("str:", str(param)))
ts <- param$TrapSpacing
fs <- param$FieldSize
np <- param$NumMice
delta <- param$CatchRadius
nv <- 4
d <- param$Density
# Simulate the studies
ncores <- detectCores()
cl <- makeCluster(ncores-1, type = "FORK")
Studies <- parLapply(cl, 1:iter, function(x) studySim(ts=ts, fs=fs, np=np, delta=delta, nv=nv, d=d))
stopCluster(cl)
print(Sys.time())
# Parse the simulated studies
Studies <- lapply(1:iter, function(x) {
p1 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day <= 2] == y))
p1 <- unlist(p1)
p2 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day >= 3] == y))
p2 <- unlist(p2)
return(data.frame(simnum=rep(x,64), trap=1:64, period1=p1, period2=p2, total=p1+p2, ring=rings))
})
print(Sys.time())
aHat <- 1:4 #ring numbers
aHat <- (ts*2*aHat)^2 #concentric ring areas
aHat <- c(aHat, aHat[4]-aHat[3]) #just ring 4
squares <- list(1, 1:2, 1:3, 1:4, 4)
# Calculate statistics
Stats <- lapply(1:iter, function(x) {
p1 <- lapply(squares, function(y) sum(Studies[[x]]$period1[Studies[[x]]$ring %in% y]))
p2 <- lapply(squares, function(y) sum(Studies[[x]]$period2[Studies[[x]]$ring %in% y]))
nHat_dHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == p2[[x]]) {
nHat <- NA
dHat <- NA
} else {
nHat <- (p1[[x]]^2)/(p1[[x]]-p2[[x]])
dHat <- nHat/aHat[[x]]
}
return(c(nHat, dHat))
})
nHat_dHat <- do.call(rbind, nHat_dHat)
pHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == 0) {
pHat <- NA
} else {
pHat <- 1 - sqrt(p2[[x]]/p1[[x]])
}
return(pHat)
})
pHatDropNeg <- lapply(pHat, function(x) {
if (x < 0 && !is.na(x)) {
return(NA)
} else {
return(x)
}
})
pHatZeroNeg <- lapply(pHat, function(x) {
if (x < 0 && !is.na(x)) {
return(0)
} else {
return(x)
}
})
pHat <- unlist(pHat)
pHatDropNeg <- unlist(pHatDropNeg)
pHatZeroNeg <- unlist(pHatZeroNeg)
return(data.frame(simnum=rep(x,length(squares)),
dHat=nHat_dHat[,2],
nHat=nHat_dHat[,1],
pHat=pHat,
pHatZeroNeg=pHatZeroNeg,
pHatDropNeg=pHatDropNeg,
aHat=aHat))
})
print(Sys.time())
# Save the data
StatsDF <- as.data.frame(rbindlist(Stats))
StatsDF$square <- factor(rep(1:5, times = iter))
StatsDF$TrapSpacing <- ts
StatsDF$FielSize <- fs
StatsDF$CatchRadius <- delta
StatsDF$NumVentures <- nv
StatsDF$density <- d
#write.csv(StatsDF, paste0("~/Documents/MousePaper/data/","delta_", delta, "ts_", ts, ".csv"))
return(StatsDF)
})
iter <- 10
print(Sys.time())
VariableSpacingSimulation <- lapply(Parameters_list, function(param) {
ts <- param$TrapSpacing
fs <- param$FieldSize
np <- param$NumMice
delta <- param$CatchRadius
nv <- 4
d <- param$Density
# Simulate the studies
ncores <- detectCores()
cl <- makeCluster(ncores-1, type = "FORK")
Studies <- parLapply(cl, 1:iter, function(x) studySim(ts=ts, fs=fs, np=np, delta=delta, nv=nv, d=d))
stopCluster(cl)
print(Sys.time())
# Parse the simulated studies
Studies <- lapply(1:iter, function(x) {
p1 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day <= 2] == y))
p1 <- unlist(p1)
p2 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day >= 3] == y))
p2 <- unlist(p2)
return(data.frame(simnum=rep(x,64), trap=1:64, period1=p1, period2=p2, total=p1+p2, ring=rings))
})
print(Sys.time())
aHat <- 1:4 #ring numbers
aHat <- (ts*2*aHat)^2 #concentric ring areas
aHat <- c(aHat, aHat[4]-aHat[3]) #just ring 4
squares <- list(1, 1:2, 1:3, 1:4, 4)
# Calculate statistics
Stats <- lapply(1:iter, function(x) {
p1 <- lapply(squares, function(y) sum(Studies[[x]]$period1[Studies[[x]]$ring %in% y]))
p2 <- lapply(squares, function(y) sum(Studies[[x]]$period2[Studies[[x]]$ring %in% y]))
nHat_dHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == p2[[x]]) {
nHat <- NA
dHat <- NA
} else {
nHat <- (p1[[x]]^2)/(p1[[x]]-p2[[x]])
dHat <- nHat/aHat[[x]]
}
return(c(nHat, dHat))
})
nHat_dHat <- do.call(rbind, nHat_dHat)
pHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == 0) {
pHat <- NA
} else {
pHat <- 1 - sqrt(p2[[x]]/p1[[x]])
}
return(pHat)
})
pHatDropNeg <- lapply(pHat, function(x) {
if (x < 0 && !is.na(x)) {
return(NA)
} else {
return(x)
}
})
pHatZeroNeg <- lapply(pHat, function(x) {
if (x < 0 && !is.na(x)) {
return(0)
} else {
return(x)
}
})
pHat <- unlist(pHat)
pHatDropNeg <- unlist(pHatDropNeg)
pHatZeroNeg <- unlist(pHatZeroNeg)
return(data.frame(simnum=rep(x,length(squares)),
dHat=nHat_dHat[,2],
nHat=nHat_dHat[,1],
pHat=pHat,
pHatZeroNeg=pHatZeroNeg,
pHatDropNeg=pHatDropNeg,
aHat=aHat))
})
print(Sys.time())
# Save the data
StatsDF <- as.data.frame(rbindlist(Stats))
StatsDF$square <- factor(rep(1:5, times = iter))
StatsDF$TrapSpacing <- ts
StatsDF$FielSize <- fs
StatsDF$CatchRadius <- delta
StatsDF$NumVentures <- nv
StatsDF$density <- d
#write.csv(StatsDF, paste0("~/Documents/MousePaper/data/","delta_", delta, "ts_", ts, ".csv"))
return(StatsDF)
})
iter <- 10
print(Sys.time())
VariableSpacingSimulation <- lapply(Parameters_list, function(param) {
ts <- param$TrapSpacing
fs <- param$FieldSize
np <- param$NumMice
delta <- param$CatchRadius
nv <- 4
d <- param$Density
# Simulate the studies
ncores <- detectCores()
cl <- makeCluster(ncores-1, type = "FORK")
Studies <- parLapply(cl, 1:iter, function(x) studySim(ts=ts, fs=fs, np=np, delta=delta, nv=nv, d=d))
stopCluster(cl)
# Parse the simulated studies
Studies <- lapply(1:iter, function(x) {
p1 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day <= 2] == y))
p1 <- unlist(p1)
p2 <- lapply(1:64, function(y) sum(Studies[[x]]$trap[Studies[[x]]$day >= 3] == y))
p2 <- unlist(p2)
return(data.frame(simnum=rep(x,64), trap=1:64, period1=p1, period2=p2, total=p1+p2, ring=rings))
})
aHat <- 1:4 #ring numbers
aHat <- (ts*2*aHat)^2 #concentric ring areas
aHat <- c(aHat, aHat[4]-aHat[3]) #just ring 4
squares <- list(1, 1:2, 1:3, 1:4, 4)
# Calculate statistics
Stats <- lapply(1:iter, function(x) {
p1 <- lapply(squares, function(y) sum(Studies[[x]]$period1[Studies[[x]]$ring %in% y]))
p2 <- lapply(squares, function(y) sum(Studies[[x]]$period2[Studies[[x]]$ring %in% y]))
nHat_dHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == p2[[x]]) {
nHat <- NA
dHat <- NA
} else {
nHat <- (p1[[x]]^2)/(p1[[x]]-p2[[x]])
dHat <- nHat/aHat[[x]]
}
return(c(nHat, dHat))
})
nHat_dHat <- do.call(rbind, nHat_dHat)
pHat <- lapply(1:length(squares), function(x) {
if (p1[[x]] == 0) {
pHat <- NA
} else {
pHat <- 1 - sqrt(p2[[x]]/p1[[x]])
}
return(pHat)
})
pHatDropNeg <- lapply(pHat, function(x) {
if (x < 0 && !is.na(x)) {
return(NA)
} else {
return(x)
}
})
pHatZeroNeg <- lapply(pHat, function(x) {
if (x < 0 && !is.na(x)) {
return(0)
} else {
return(x)
}
})
pHat <- unlist(pHat)
pHatDropNeg <- unlist(pHatDropNeg)
pHatZeroNeg <- unlist(pHatZeroNeg)
return(data.frame(simnum=rep(x,length(squares)),
dHat=nHat_dHat[,2],
nHat=nHat_dHat[,1],
pHat=pHat,
pHatZeroNeg=pHatZeroNeg,
pHatDropNeg=pHatDropNeg,
aHat=aHat))
})
# Save the data
StatsDF <- as.data.frame(rbindlist(Stats))
StatsDF$square <- factor(rep(1:5, times = iter))
StatsDF$TrapSpacing <- ts
StatsDF$FielSize <- fs
StatsDF$CatchRadius <- delta
StatsDF$NumVentures <- nv
StatsDF$density <- d
print(Sys.time())
#write.csv(StatsDF, paste0("~/Documents/MousePaper/data/","delta_", delta, "ts_", ts, ".csv"))
return(StatsDF)
})
